// <auto-generated />
using AliasWebApiCore.Models.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace AliasWebApiCore.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AliasWebApiCore.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AccountClosureDate");

                    b.Property<string>("AccountNumber");

                    b.Property<string>("AccountStatus");

                    b.Property<int>("AccountTypeId");

                    b.Property<DateTime?>("ApprovedDateTime");

                    b.Property<int?>("ApprovedUserId");

                    b.Property<bool?>("Atm");

                    b.Property<decimal>("AvailableBalance")
                        .HasColumnType("Money");

                    b.Property<int>("BranchId");

                    b.Property<int?>("ClosedUserId");

                    b.Property<string>("ClosureReason");

                    b.Property<int?>("CorporateCustId");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<string>("CustomerNumber");

                    b.Property<int?>("GeneralLedgerCodeId");

                    b.Property<int?>("IndividualCustId");

                    b.Property<int?>("InterestOnSavingsId");

                    b.Property<bool?>("InternetBanking");

                    b.Property<int?>("JointId");

                    b.Property<bool?>("LoanPaymentAlert");

                    b.Property<bool?>("MobileBanking");

                    b.Property<bool?>("MobileMoney");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<DateTime?>("OpenedDate");

                    b.Property<string>("PurposeId");

                    b.Property<int?>("RejectedUserId");

                    b.Property<int?>("RelationsOfficerId");

                    b.Property<bool?>("SalaryAccount");

                    b.Property<bool>("SyncStatus");

                    b.Property<decimal>("TotalBalance")
                        .HasColumnType("Money");

                    b.Property<bool?>("TransactionAlert");

                    b.Property<int?>("UserId");

                    b.HasKey("AccountId");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CorporateCustId");

                    b.HasIndex("GeneralLedgerCodeId");

                    b.HasIndex("IndividualCustId");

                    b.HasIndex("JointId");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.AccountPopupMsg", b =>
                {
                    b.Property<int>("AccountPopupMsgId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountId");

                    b.Property<int>("BranchId");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<string>("Message");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<bool>("Status");

                    b.HasKey("AccountPopupMsgId");

                    b.HasIndex("AccountId");

                    b.HasIndex("BranchId");

                    b.ToTable("AccountPopupMsg");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.AccountTypes", b =>
                {
                    b.Property<int>("AccountTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AccountAgeBeforeInterestIsPayable");

                    b.Property<string>("AccountType");

                    b.Property<string>("AccountTypeCode")
                        .IsRequired();

                    b.Property<string>("AllowFDBackDating");

                    b.Property<bool>("AllowInterestOnDormantAccount");

                    b.Property<bool>("AllowOverdrawnBalance");

                    b.Property<int>("ApprovalRuleId");

                    b.Property<bool>("AutoApplyCOT");

                    b.Property<bool>("AutoApplySavingsInterest");

                    b.Property<string>("AutoApplySavingsInterestFreq");

                    b.Property<string>("AutoCOTApplicationFreq");

                    b.Property<string>("BaseType");

                    b.Property<int>("COTTypeID");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<int?>("GLCodeForFDInterestAccrued");

                    b.Property<int?>("GLCodeForFDInterestExpense");

                    b.Property<int>("GeneralLedgerCodeId");

                    b.Property<int?>("GlCodeForFDPenalty");

                    b.Property<bool>("InvestmentPlacement");

                    b.Property<int>("LedgerId");

                    b.Property<string>("LedgerType");

                    b.Property<int?>("MaximumFixedDepositTenor");

                    b.Property<decimal>("MinimumBalanceBeforeInterestIsPayable")
                        .HasColumnType("Money");

                    b.Property<int?>("MinimumFixedDepositTenor");

                    b.Property<decimal>("MinimumInitialDepositAmount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<int?>("NumberOfDaysInYearForFDInterestCal");

                    b.Property<int>("NumberOfDaystoClassifyAccountAsDormant");

                    b.Property<string>("SavingsInterestCalculationMethod");

                    b.Property<int?>("SavingsInterestTypeId");

                    b.Property<int>("SequenceFormatId");

                    b.Property<int?>("UserId");

                    b.Property<int>("WaitingPeriodBeforeFirstWithdrawal");

                    b.Property<int>("WithdrawalFrequency");

                    b.HasKey("AccountTypeId");

                    b.HasIndex("GeneralLedgerCodeId");

                    b.HasIndex("LedgerId");

                    b.HasIndex("SavingsInterestTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("AccountTypes");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.ApprovalRules", b =>
                {
                    b.Property<int>("ApprovalRulesId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApproversUserIds");

                    b.Property<int>("BranchId");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<string>("Description");

                    b.Property<int>("Level");

                    b.Property<decimal>("MaximumAmount")
                        .HasColumnType("Money");

                    b.Property<decimal>("MinimumAmount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<string>("Type");

                    b.HasKey("ApprovalRulesId");

                    b.HasIndex("BranchId");

                    b.ToTable("ApprovalRules");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.BankDetails", b =>
                {
                    b.Property<int>("BankDetailsId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActFile");

                    b.Property<string>("CompanyName");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<string>("DatabaseId");

                    b.Property<string>("LocationAddress");

                    b.Property<string>("Logo");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<string>("PostalAddress");

                    b.Property<string>("ServerMacId");

                    b.Property<int?>("UserId");

                    b.HasKey("BankDetailsId");

                    b.HasIndex("UserId");

                    b.ToTable("BankDetails");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.Banktiers", b =>
                {
                    b.Property<int>("BanktiersId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("ChargeXAmountForActivityPeriod");

                    b.Property<DateTime>("ChargeXAmountForActivityPeriodDate");

                    b.Property<bool>("ConsiderOverdraftForPeriod");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<string>("Description");

                    b.Property<bool>("FlatRate");

                    b.Property<decimal>("FlatRateAmount")
                        .HasColumnType("Money");

                    b.Property<int>("GeneralLedgerCodeId");

                    b.Property<decimal>("MaximumAmount")
                        .HasColumnType("Money");

                    b.Property<decimal>("MinimumAmount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<string>("Name");

                    b.Property<bool>("Percentage");

                    b.Property<double>("PercentageValue");

                    b.Property<string>("Type");

                    b.HasKey("BanktiersId");

                    b.HasIndex("GeneralLedgerCodeId");

                    b.ToTable("Banktiers");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.BranchDetails", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountFile");

                    b.Property<string>("Area");

                    b.Property<string>("BranchCode")
                        .IsRequired();

                    b.Property<string>("BranchName");

                    b.Property<int>("CompanyId");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<string>("Databasefile");

                    b.Property<string>("District");

                    b.Property<string>("LocationAddress");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<string>("PostalAddress");

                    b.Property<string>("Region");

                    b.Property<string>("Status");

                    b.Property<string>("TelephoneNumber");

                    b.Property<int?>("UserId");

                    b.HasKey("BranchId");

                    b.HasIndex("UserId");

                    b.ToTable("BranchDetails");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.Cheques", b =>
                {
                    b.Property<int>("ChequeId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountId");

                    b.Property<bool?>("AutoClear");

                    b.Property<int>("BranchId");

                    b.Property<decimal>("ChequeAmount")
                        .HasColumnType("Money");

                    b.Property<string>("ChequeNumber");

                    b.Property<DateTime?>("ClearedDate");

                    b.Property<int?>("ClearedUserId");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<string>("Note");

                    b.Property<DateTime?>("ReturnedDate");

                    b.Property<int?>("ReturnedUserId");

                    b.Property<string>("Status");

                    b.HasKey("ChequeId");

                    b.HasIndex("AccountId");

                    b.HasIndex("BranchId");

                    b.ToTable("Cheques");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.CommonSequence", b =>
                {
                    b.Property<int>("CommonSequenceId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Counter");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<int>("FixedLength");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<string>("Name");

                    b.Property<string>("Prefix");

                    b.Property<string>("Suffix");

                    b.HasKey("CommonSequenceId");

                    b.ToTable("CommonSequences");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.CompanyDirectors", b =>
                {
                    b.Property<int>("DirectorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Contacts");

                    b.Property<int>("CorporateCustId");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<string>("FirstName");

                    b.Property<string>("IdNumber");

                    b.Property<string>("IdType");

                    b.Property<string>("LastName");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<string>("OtherName");

                    b.Property<string>("Title");

                    b.Property<int?>("UserId");

                    b.HasKey("DirectorId");

                    b.HasIndex("CorporateCustId");

                    b.HasIndex("UserId");

                    b.ToTable("CompanyDirectorses");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.CompanySignatory", b =>
                {
                    b.Property<int>("SignatoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Contact");

                    b.Property<int>("CorporateCustId");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<string>("OtherName");

                    b.Property<string>("Picture");

                    b.Property<string>("Signature");

                    b.Property<string>("Title");

                    b.Property<string>("Type");

                    b.Property<int?>("UserId");

                    b.HasKey("SignatoryId");

                    b.HasIndex("CorporateCustId");

                    b.HasIndex("UserId");

                    b.ToTable("CompanySignatories");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.Corporate", b =>
                {
                    b.Property<int>("CorporateCustId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<bool>("BroadcastAlert");

                    b.Property<string>("ComapnyLocation");

                    b.Property<string>("CompanyEmail");

                    b.Property<string>("CompanyFax");

                    b.Property<string>("CompanyName");

                    b.Property<string>("CompanyPhone");

                    b.Property<string>("CompanyWebsite");

                    b.Property<string>("CorporateNumber")
                        .IsRequired();

                    b.Property<int?>("CountryListCountryId");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime>("DateOfIncorporation");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<string>("NatureOfBusiness");

                    b.Property<bool>("Placement");

                    b.Property<string>("RegistrationNumber");

                    b.Property<int?>("RelationalOfficer");

                    b.Property<bool>("SupportAlert");

                    b.Property<string>("TinNumber");

                    b.Property<int?>("UserId");

                    b.HasKey("CorporateCustId");

                    b.HasIndex("CountryListCountryId");

                    b.HasIndex("UserId");

                    b.ToTable("Corporates");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.CountryList", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<string>("Desc");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("UserId");

                    b.HasKey("CountryId");

                    b.HasIndex("UserId");

                    b.ToTable("CountryLists");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.CustomerType", b =>
                {
                    b.Property<int>("CustomerTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("CustomerTypeId");

                    b.ToTable("CustomerTypes");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.FileUpload", b =>
                {
                    b.Property<string>("FileId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<long>("FileLength");

                    b.Property<string>("FileName");

                    b.Property<string>("FilePath");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.HasKey("FileId");

                    b.ToTable("FileUploads");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.FixedDeposit", b =>
                {
                    b.Property<int>("FixedDepositId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountId");

                    b.Property<int?>("AutoApplyFixedDepositInterest");

                    b.Property<int?>("DaysToAutoApplyFixedDepositInterest");

                    b.Property<decimal?>("FixedDepositDailyInterest")
                        .HasColumnType("Money");

                    b.Property<int>("FixedDepositFundingSourceAccountId");

                    b.Property<decimal?>("FixedDepositInterestAccrued")
                        .HasColumnType("Money");

                    b.Property<decimal?>("FixedDepositInterestAmount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("FixedDepositInterestAutoApplyEndDate");

                    b.Property<decimal?>("FixedDepositInterestRate");

                    b.Property<decimal?>("FixedDepositMaturityAmount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("FixedDepositMaturityDate");

                    b.Property<int?>("FixedDepositPeriod");

                    b.Property<decimal?>("FixedDepositPrincipal")
                        .HasColumnType("Money");

                    b.Property<int?>("FixedDepositServicingAccountId");

                    b.Property<DateTime?>("InvIntLastAccruedDate");

                    b.Property<bool?>("InvestmentAlert");

                    b.Property<decimal?>("NewInterestRate");

                    b.Property<int?>("NewPeriod");

                    b.Property<DateTime?>("NextFixedDepositInterestAutoApplyDate");

                    b.Property<bool?>("RolloverInterest");

                    b.Property<bool?>("RolloverPrincipal");

                    b.HasKey("FixedDepositId");

                    b.HasIndex("AccountId");

                    b.ToTable("FixedDeposit");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.GeneralLedgerCode", b =>
                {
                    b.Property<int>("GeneralLedgerCodeId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowJournals");

                    b.Property<string>("BalanceType");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<string>("Description");

                    b.Property<string>("GLType");

                    b.Property<int>("MainGeneralLedgerCodeId");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<bool>("Status");

                    b.Property<string>("SubCode");

                    b.Property<int?>("UserId");

                    b.HasKey("GeneralLedgerCodeId");

                    b.HasIndex("MainGeneralLedgerCodeId");

                    b.HasIndex("UserId");

                    b.ToTable("GeneralLedgerCodes");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("GroupId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<DateTime?>("LastLogOut");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<DateTime?>("LoginTime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<int?>("UserId");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<bool>("isLoggedIn");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.Individual", b =>
                {
                    b.Property<int>("IndividualCustId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("AddressVerified");

                    b.Property<string>("BiometricIdNumber");

                    b.Property<bool>("BroadcastAlert");

                    b.Property<string>("City");

                    b.Property<int>("CountryId");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<string>("CustomerNumber")
                        .IsRequired();

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email");

                    b.Property<int>("FirstAccOfficerId");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("Gender")
                        .IsRequired();

                    b.Property<string>("HomeType");

                    b.Property<string>("HouseNumber");

                    b.Property<DateTime>("IdDateExpire");

                    b.Property<DateTime>("IdDateIssued");

                    b.Property<string>("IdNumber");

                    b.Property<string>("IdVerified");

                    b.Property<string>("KAddress");

                    b.Property<string>("KEmail");

                    b.Property<string>("KName");

                    b.Property<string>("KPhone");

                    b.Property<string>("KRelation");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("MaritalStatus");

                    b.Property<string>("Mobile");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<DateTime>("MotherDateOfBirth");

                    b.Property<string>("MotherFirstName");

                    b.Property<string>("MotherMaidenName");

                    b.Property<string>("Note");

                    b.Property<int?>("NumberOfChildren");

                    b.Property<string>("Occupation");

                    b.Property<string>("OtherContact");

                    b.Property<string>("OtherName")
                        .IsRequired();

                    b.Property<string>("Picture");

                    b.Property<int>("PostCode");

                    b.Property<string>("PostalAddress");

                    b.Property<int>("RatingId");

                    b.Property<int?>("RelatedDocumentId");

                    b.Property<string>("SSNumber");

                    b.Property<int>("SectorId");

                    b.Property<string>("SecurityGroup");

                    b.Property<string>("Signature");

                    b.Property<DateTime>("SpouseDateOfBirth");

                    b.Property<string>("SpouseName");

                    b.Property<string>("SpouseOtherName");

                    b.Property<int>("Status");

                    b.Property<bool>("SupportAlert");

                    b.Property<int>("TargetId");

                    b.Property<string>("Telephone");

                    b.Property<string>("TinNumber");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<int?>("UserId");

                    b.HasKey("IndividualCustId");

                    b.HasIndex("CountryId");

                    b.HasIndex("RatingId");

                    b.HasIndex("SectorId");

                    b.HasIndex("TargetId");

                    b.HasIndex("UserId");

                    b.ToTable("Individuals");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.IssuedChequeBooks", b =>
                {
                    b.Property<int>("IssuedChequeBookId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountId");

                    b.Property<int>("BranchId");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<int>("EndNumber");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<int>("StartNumber");

                    b.Property<string>("Status");

                    b.HasKey("IssuedChequeBookId");

                    b.HasIndex("AccountId");

                    b.HasIndex("BranchId");

                    b.ToTable("IssuedChequeBooks");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.JointCustomer", b =>
                {
                    b.Property<int>("JointId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<bool>("GeneralBroadAlert");

                    b.Property<string>("JointNumber")
                        .IsRequired();

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<bool>("SupportAlert");

                    b.Property<int?>("UserId");

                    b.HasKey("JointId");

                    b.HasIndex("UserId");

                    b.ToTable("JointCustomers");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.JointCustomersKeys", b =>
                {
                    b.Property<int>("JointCustKeysId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<int>("IndividualCustId");

                    b.Property<int>("JointId");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<int?>("UserId");

                    b.HasKey("JointCustKeysId");

                    b.HasIndex("IndividualCustId");

                    b.HasIndex("JointId");

                    b.HasIndex("UserId");

                    b.ToTable("JointCustomersKeys");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.Ledgers", b =>
                {
                    b.Property<int>("LedgerId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<string>("Name");

                    b.Property<int?>("UserId");

                    b.HasKey("LedgerId");

                    b.HasIndex("UserId");

                    b.ToTable("Ledgers");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.Liens", b =>
                {
                    b.Property<int>("LienId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountId");

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("ApprovedDate");

                    b.Property<string>("ApprovedNote");

                    b.Property<int?>("ApprovedUserId");

                    b.Property<bool?>("AutoRelease");

                    b.Property<int>("BranchId");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("LienNumber");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<string>("Reference");

                    b.Property<string>("RejectedNote");

                    b.Property<int?>("RejectedUserId");

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("Status");

                    b.HasKey("LienId");

                    b.HasIndex("AccountId");

                    b.HasIndex("BranchId");

                    b.ToTable("Liens");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.Loan", b =>
                {
                    b.Property<int>("LoanId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.HasKey("LoanId");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.LoanServicing", b =>
                {
                    b.Property<int>("LoanServicingCustId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("AddressVerified");

                    b.Property<string>("AverageSalary");

                    b.Property<string>("Banker");

                    b.Property<string>("BiometricIdNumber");

                    b.Property<string>("City");

                    b.Property<int>("CountryId");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<string>("CurrentPosition");

                    b.Property<string>("CurrentStation");

                    b.Property<string>("CustomerNumber");

                    b.Property<int>("CustomerTypeId");

                    b.Property<DateTime>("DateEmployed");

                    b.Property<string>("DateOfBirth")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<int>("FirstAccOfficerId");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("Gender")
                        .IsRequired();

                    b.Property<bool>("GeneralBroadAlert");

                    b.Property<string>("HomeType");

                    b.Property<string>("HouseNumber");

                    b.Property<DateTime?>("IdDateExpire");

                    b.Property<DateTime?>("IdDateIssued");

                    b.Property<string>("IdVerified");

                    b.Property<bool>("InvestmentAlert");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<bool>("LoanPaymentAlert");

                    b.Property<string>("MaritalStatus");

                    b.Property<string>("Mobile");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<DateTime>("MotherDateOfBirth");

                    b.Property<string>("MotherFirstName");

                    b.Property<string>("MotherMaidenName");

                    b.Property<string>("NameOfEmployer");

                    b.Property<int?>("NumberOfChildren");

                    b.Property<int>("Occupation");

                    b.Property<string>("OtherName")
                        .IsRequired();

                    b.Property<string>("Picture");

                    b.Property<string>("PostalAddress");

                    b.Property<int>("RatingId");

                    b.Property<int?>("RelatedDocumentId");

                    b.Property<string>("SSNumber");

                    b.Property<int>("SecondAccOfficerId");

                    b.Property<int>("SectorId");

                    b.Property<string>("SecurityGroup");

                    b.Property<string>("Signature");

                    b.Property<DateTime>("SpouseDateOfBirth");

                    b.Property<string>("SpouseName");

                    b.Property<string>("SpouseOtherName");

                    b.Property<int>("Status");

                    b.Property<bool>("SupportAlert");

                    b.Property<int>("TargetId");

                    b.Property<string>("Telephone");

                    b.Property<string>("TinNumber");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<bool>("TransactionAlert");

                    b.Property<int?>("UserId");

                    b.HasKey("LoanServicingCustId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("RatingId");

                    b.HasIndex("SectorId");

                    b.HasIndex("TargetId");

                    b.HasIndex("UserId");

                    b.ToTable("LoanServicings");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.MainGeneralLedgerCodes", b =>
                {
                    b.Property<int>("MainGeneralLedgerCodeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<bool?>("Status");

                    b.HasKey("MainGeneralLedgerCodeId");

                    b.ToTable("MainGeneralLedgerCodes");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.Overdrafts", b =>
                {
                    b.Property<int>("OverdraftId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountId");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("ApprovedDate");

                    b.Property<string>("ApprovedNote");

                    b.Property<int?>("ApprovedUserId");

                    b.Property<bool?>("AutoRelease");

                    b.Property<int>("BranchId");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("EndDate");

                    b.Property<decimal?>("InterestAccrued")
                        .HasColumnType("Money");

                    b.Property<decimal?>("InterestRate");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<string>("OverdraftNumber");

                    b.Property<string>("Reference");

                    b.Property<DateTime?>("RejectedDate");

                    b.Property<string>("RejectedNote");

                    b.Property<int?>("RejectedUserId");

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("Status");

                    b.Property<string>("Type");

                    b.HasKey("OverdraftId");

                    b.HasIndex("AccountId");

                    b.HasIndex("BranchId");

                    b.ToTable("Overdrafts");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<string>("Status");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.Property<int?>("UserId");

                    b.HasKey("RatingId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.RelatedDocument", b =>
                {
                    b.Property<int>("RelatedDocumentId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CorporateCustId");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.HasKey("RelatedDocumentId");

                    b.HasIndex("CorporateCustId");

                    b.ToTable("RelatedDocuments");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.Sector", b =>
                {
                    b.Property<int>("SectorId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<string>("Status");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.Property<int?>("UserId");

                    b.HasKey("SectorId");

                    b.HasIndex("UserId");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.ServiceConfig", b =>
                {
                    b.Property<int>("ServiceConfigId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BranchId")
                        .IsRequired();

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<string>("CronSchedule");

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("Frequency");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<string>("ServiceType");

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("StartUpType");

                    b.Property<bool?>("Status");

                    b.HasKey("ServiceConfigId");

                    b.HasIndex("BranchId");

                    b.ToTable("ServiceConfig");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.SessionManager", b =>
                {
                    b.Property<int>("SessionManagerId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BranchId")
                        .IsRequired();

                    b.Property<DateTime?>("ClosedDate");

                    b.Property<int?>("ClosedUserId");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<DateTime?>("SessionDate");

                    b.Property<string>("Status");

                    b.HasKey("SessionManagerId");

                    b.HasIndex("BranchId");

                    b.ToTable("SessionManager");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.SmsConfig", b =>
                {
                    b.Property<int>("SmsConfigId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<string>("HostUrl");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<string>("OptKey");

                    b.Property<string>("Password");

                    b.Property<string>("Sender");

                    b.Property<string>("Status");

                    b.Property<string>("UserName");

                    b.HasKey("SmsConfigId");

                    b.ToTable("SmsConfig");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.SmsLog", b =>
                {
                    b.Property<int>("SmsLogId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AccountId")
                        .IsRequired();

                    b.Property<int?>("BranchId")
                        .IsRequired();

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Message");

                    b.Property<string>("PhoneNumber");

                    b.Property<int?>("ResponseCode");

                    b.Property<DateTime?>("SentDate");

                    b.Property<bool?>("Status");

                    b.Property<string>("TransCode");

                    b.HasKey("SmsLogId");

                    b.HasIndex("AccountId");

                    b.HasIndex("BranchId");

                    b.ToTable("SmsLog");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.Sweep", b =>
                {
                    b.Property<int>("SweepId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("ApprovedDate");

                    b.Property<string>("ApprovedNote");

                    b.Property<int?>("ApprovedUserId");

                    b.Property<bool?>("AutoRelease");

                    b.Property<int>("BranchId");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("Frequency");

                    b.Property<int>("FromAccountId");

                    b.Property<decimal>("MinimumBalance")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<string>("Reference");

                    b.Property<DateTime?>("RejectedDate");

                    b.Property<string>("RejectedNote");

                    b.Property<int?>("RejectedUserId");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Status");

                    b.Property<int>("ToAccountId");

                    b.Property<int?>("TransferDay");

                    b.Property<string>("Type");

                    b.HasKey("SweepId");

                    b.HasIndex("BranchId");

                    b.ToTable("Sweeps");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.Target", b =>
                {
                    b.Property<int>("TargetId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<string>("Status");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.Property<int?>("UserId");

                    b.HasKey("TargetId");

                    b.HasIndex("UserId");

                    b.ToTable("Targets");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.Teller", b =>
                {
                    b.Property<int>("TellerID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BranchId");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<decimal>("DepositLimit")
                        .HasColumnType("Money");

                    b.Property<int>("GeneralLedgerCodeId");

                    b.Property<DateTime?>("LastLoginDate");

                    b.Property<DateTime?>("LastLogoutDate");

                    b.Property<bool?>("LoginStatus");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<string>("Pin");

                    b.Property<int?>("UserId");

                    b.Property<decimal>("WithdrawalLimit")
                        .HasColumnType("Money");

                    b.HasKey("TellerID");

                    b.HasIndex("BranchId");

                    b.HasIndex("GeneralLedgerCodeId");

                    b.HasIndex("UserId");

                    b.ToTable("Teller");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AccountId");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("Money");

                    b.Property<int>("BranchId");

                    b.Property<string>("ChequeNumber");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<decimal>("Credit")
                        .HasColumnType("Money");

                    b.Property<decimal>("Debit")
                        .HasColumnType("Money");

                    b.Property<int?>("GeneralLedgerCodeId");

                    b.Property<int>("LedgerId");

                    b.Property<string>("LedgerType");

                    b.Property<int?>("LoanId");

                    b.Property<string>("MacAddress");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<DateTime?>("ReconciledSessionDate");

                    b.Property<bool?>("ReconciledState");

                    b.Property<int?>("ReconciledUserId");

                    b.Property<string>("Reference");

                    b.Property<DateTime?>("SessionDate");

                    b.Property<bool?>("SmsStatus");

                    b.Property<string>("TransCode");

                    b.Property<string>("TransSource");

                    b.HasKey("TransactionId");

                    b.HasIndex("AccountId");

                    b.HasIndex("BranchId");

                    b.HasIndex("GeneralLedgerCodeId");

                    b.HasIndex("LedgerId");

                    b.HasIndex("LoanId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.TransCodeItems", b =>
                {
                    b.Property<int>("TransCodeItemsId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AccountId");

                    b.Property<int>("BranchId");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<decimal?>("Credit")
                        .HasColumnType("Money");

                    b.Property<decimal?>("Debit")
                        .HasColumnType("Money");

                    b.Property<int?>("GeneralLedgerCodeId");

                    b.Property<string>("LedgerType")
                        .HasMaxLength(10);

                    b.Property<int?>("LoanId");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<string>("Reference")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("SessionDate");

                    b.Property<string>("Status");

                    b.Property<string>("TransCode")
                        .HasMaxLength(50);

                    b.Property<string>("TransSource")
                        .HasMaxLength(50);

                    b.HasKey("TransCodeItemsId");

                    b.HasIndex("AccountId");

                    b.HasIndex("BranchId");

                    b.HasIndex("GeneralLedgerCodeId");

                    b.ToTable("TransCodeItems");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BranchId");

                    b.Property<string>("ChatName")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email");

                    b.Property<bool?>("Enabled");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("ImageFile")
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<string>("OtherNames")
                        .HasMaxLength(150);

                    b.Property<string>("PasswordChangeFreq");

                    b.Property<int?>("Reset");

                    b.Property<bool>("Status");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.UserGroup", b =>
                {
                    b.Property<int?>("CreatedUserId");

                    b.Property<int>("GroupId");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ModifiedUserId");

                    b.Property<int?>("UserId");

                    b.HasKey("CreatedUserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AliasWebApiCore.Models.Account", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.AccountTypes", "AccountTypes")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.BranchDetails", "BranchDetails")
                        .WithMany("Accounts")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.Corporate", "Corporate")
                        .WithMany("Accounts")
                        .HasForeignKey("CorporateCustId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.GeneralLedgerCode")
                        .WithMany("Accounts")
                        .HasForeignKey("GeneralLedgerCodeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.Individual", "Individual")
                        .WithMany("Accounts")
                        .HasForeignKey("IndividualCustId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.JointCustomer", "JointCustomer")
                        .WithMany("Accounts")
                        .HasForeignKey("JointId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AliasWebApiCore.Models.AccountPopupMsg", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.BranchDetails", "BranchDetails")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AliasWebApiCore.Models.AccountTypes", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.GeneralLedgerCode", "GeneralLedgerCode")
                        .WithMany()
                        .HasForeignKey("GeneralLedgerCodeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.Ledgers", "Ledgers")
                        .WithMany()
                        .HasForeignKey("LedgerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.Banktiers", "Banktiers")
                        .WithMany()
                        .HasForeignKey("SavingsInterestTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.User")
                        .WithMany("AccountTypes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AliasWebApiCore.Models.ApprovalRules", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.BranchDetails", "BranchDetails")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AliasWebApiCore.Models.BankDetails", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.User")
                        .WithMany("BankDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AliasWebApiCore.Models.Banktiers", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.GeneralLedgerCode", "GeneralLedgerCode")
                        .WithMany("Banktiers")
                        .HasForeignKey("GeneralLedgerCodeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AliasWebApiCore.Models.BranchDetails", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.User")
                        .WithMany("BranchDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AliasWebApiCore.Models.Cheques", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.BranchDetails", "BranchDetails")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AliasWebApiCore.Models.CompanyDirectors", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.Corporate", "Corporate")
                        .WithMany("CompanyDirectors")
                        .HasForeignKey("CorporateCustId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.User")
                        .WithMany("CompanyDirectors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AliasWebApiCore.Models.CompanySignatory", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.Corporate", "Corporate")
                        .WithMany("CompanySignatory")
                        .HasForeignKey("CorporateCustId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.User")
                        .WithMany("CompanySignatories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AliasWebApiCore.Models.Corporate", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.CountryList")
                        .WithMany("Corporates")
                        .HasForeignKey("CountryListCountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.User")
                        .WithMany("Corporates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AliasWebApiCore.Models.CountryList", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.User")
                        .WithMany("CountryLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AliasWebApiCore.Models.FixedDeposit", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AliasWebApiCore.Models.GeneralLedgerCode", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.MainGeneralLedgerCodes", "MainGeneralLedgerCodes")
                        .WithMany()
                        .HasForeignKey("MainGeneralLedgerCodeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.User")
                        .WithMany("GeneralLegderCodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AliasWebApiCore.Models.Identity.ApplicationUser", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AliasWebApiCore.Models.Individual", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.CountryList", "CountryList")
                        .WithMany("Individuals")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.Rating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.Sector", "Sector")
                        .WithMany()
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.Target", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.User")
                        .WithMany("Individuals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AliasWebApiCore.Models.IssuedChequeBooks", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.BranchDetails", "BranchDetails")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AliasWebApiCore.Models.JointCustomer", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.User")
                        .WithMany("JointCustomers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AliasWebApiCore.Models.JointCustomersKeys", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.Individual", "Individual")
                        .WithMany()
                        .HasForeignKey("IndividualCustId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.JointCustomer", "JointCustomer")
                        .WithMany("JointCustomersKeys")
                        .HasForeignKey("JointId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.User")
                        .WithMany("JointCustomersKeys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AliasWebApiCore.Models.Ledgers", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.User")
                        .WithMany("Ledgers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AliasWebApiCore.Models.Liens", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.BranchDetails", "BranchDetails")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AliasWebApiCore.Models.LoanServicing", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.CountryList", "CountryList")
                        .WithMany("LoanServicings")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.CustomerType", "CustomerType")
                        .WithMany()
                        .HasForeignKey("CustomerTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.Rating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.Sector", "Sector")
                        .WithMany()
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.Target", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.User")
                        .WithMany("LoanServicesCollection")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AliasWebApiCore.Models.Overdrafts", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.BranchDetails", "BranchDetails")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AliasWebApiCore.Models.Rating", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AliasWebApiCore.Models.RelatedDocument", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.Corporate", "Corporate")
                        .WithMany("RelatedDocuments")
                        .HasForeignKey("CorporateCustId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AliasWebApiCore.Models.Sector", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.User")
                        .WithMany("Sectors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AliasWebApiCore.Models.ServiceConfig", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.BranchDetails", "BranchDetails")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AliasWebApiCore.Models.SessionManager", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.BranchDetails", "BranchDetails")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AliasWebApiCore.Models.SmsLog", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.BranchDetails", "BranchDetails")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AliasWebApiCore.Models.Sweep", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.BranchDetails", "BranchDetails")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AliasWebApiCore.Models.Target", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.User")
                        .WithMany("Targets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AliasWebApiCore.Models.Teller", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.BranchDetails", "BranchDetails")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.GeneralLedgerCode", "GeneralLedgerCode")
                        .WithMany()
                        .HasForeignKey("GeneralLedgerCodeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.User", "User")
                        .WithMany("Tellers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AliasWebApiCore.Models.Transaction", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.BranchDetails", "BranchDetails")
                        .WithMany("Transactions")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.GeneralLedgerCode", "GeneralLedgerCode")
                        .WithMany()
                        .HasForeignKey("GeneralLedgerCodeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.Ledgers", "Ledgers")
                        .WithMany()
                        .HasForeignKey("LedgerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.Loan", "Loan")
                        .WithMany("Transactions")
                        .HasForeignKey("LoanId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AliasWebApiCore.Models.TransCodeItems", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.BranchDetails", "BranchDetails")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.GeneralLedgerCode", "GeneralLedgerCode")
                        .WithMany()
                        .HasForeignKey("GeneralLedgerCodeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("AliasWebApiCore.Models.UserGroup", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AliasWebApiCore.Models.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AliasWebApiCore.Models.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
